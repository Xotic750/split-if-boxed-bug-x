{"version":3,"sources":["../src/split-if-boxed-bug-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,oBAArB;AACA,OAAO,QAAP,MAAqB,WAArB;AAEA,IAAM,YAAY,GAAG,EAArB;AACA,IAAM,QAAQ,GAAG,YAAY,CAAC,KAA9B;AACA,IAAM,UAAU,GAAG,QAAQ,KAAK,KAAb,IAAsB,OAAO,QAAP,KAAoB,UAA1C,IAAwD,QAA3E;AAEA;;;;;;;;;AAQA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AACtD,SAAO,UAAU,IAAI,UAAU,CAAC,KAAD,CAAxB,GAAkC,QAAQ,CAAC,IAAT,CAAc,KAAd,EAAqB,YAArB,CAAlC,GAAuE,KAA9E;AACD,CAFD;;AAIA,eAAe,eAAf","file":"split-if-boxed-bug-x.esm.js","sourcesContent":["import hasBoxed from 'has-boxed-string-x';\nimport isString from 'is-string';\n\nconst EMPTY_STRING = '';\nconst strSplit = EMPTY_STRING.split;\nconst isStringFn = hasBoxed === false && typeof strSplit === 'function' && isString;\n\n/**\n * This method tests if a value is a string with the boxed bug; splits to an\n * array for iteration; otherwise returns the original value.\n *\n * @param {*} [value] - The value to be tested.\n * @returns {*} An array or characters if value was a string with the boxed bug;\n *  otherwise the value.\n */\nconst splitIfBoxedBug = function splitIfBoxedBug(value) {\n  return isStringFn && isStringFn(value) ? strSplit.call(value, EMPTY_STRING) : value;\n};\n\nexport default splitIfBoxedBug;\n"]}