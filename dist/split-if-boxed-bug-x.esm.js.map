{"version":3,"sources":["../src/split-if-boxed-bug-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,oBAArB;AACA,OAAO,QAAP,MAAqB,WAArB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,YAAY,GAAG,EAArB;AACA,IAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,KAAd,CAA1B;;AAEA,IAAM,QAAQ,GAAG,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC/C,SAAO,KAAP;AACD,CAFD;;AAIA,OAAO,IAAM,cAAc,GAAG,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC5D,SAAO,QAAQ,CAAC,KAAD,CAAR,GAAkB,QAAQ,CAAC,KAAD,EAAQ,YAAR,CAA1B,GAAkD,QAAQ,CAAC,KAAD,CAAjE;AACD,CAFM;AAIP;;;;;;;;;AAQA,IAAM,gBAAgB,GAAG,QAAQ,GAAG,QAAH,GAAc,cAA/C;AAEA,eAAe,gBAAf","file":"split-if-boxed-bug-x.esm.js","sourcesContent":["import hasBoxed from 'has-boxed-string-x';\nimport isString from 'is-string';\nimport methodize from 'simple-methodize-x';\n\nconst EMPTY_STRING = '';\nconst strSplit = methodize(EMPTY_STRING.split);\n\nconst identity = function splitIfBoxedBug(value) {\n  return value;\n};\n\nexport const implementation = function splitIfBoxedBug(value) {\n  return isString(value) ? strSplit(value, EMPTY_STRING) : identity(value);\n};\n\n/**\n * This method tests if a value is a string with the boxed bug; splits to an\n * array for iteration; otherwise returns the original value.\n *\n * @param {*} [value] - The value to be tested.\n * @returns {*} An array or characters if value was a string with the boxed bug;\n *  otherwise the value.\n */\nconst $splitIfBoxedBug = hasBoxed ? identity : implementation;\n\nexport default $splitIfBoxedBug;\n"]}